/*!

\page echo Echo

Our goal here will be to make a FastCGI application that responds to clients
with an echo of all environment data that was processed. This will include HTTP
header data along with post data that was transmitted by the client. Since we
want to be able to echo any alphabets, our best solution is to use wide
characters internally and have the library code convert it to utf-8 before
sending it to the client. It covers the following topics:
 - Allowing POST uploads
 - Setting a cookie
 - Accessing all your environment data in Fastcgipp::Http::Environment
 - Using the Fastcgipp::Request::dump() functions

You can build it with

    make echo.fcgi

### Walkthrough ###

First we'll define our request.
\snippet examples/echo.cpp Request definition

We will now use the Fastcgipp::Request::Request argument to set our maximum
upload size to 5 kiB so as to avoid this output being too large. The default
argument for this constructor is 0 thereby prohibiting POST data for any request
class that uses the base class's default constructor. If the client attempts
send a POST request larger than 5 kiB they will receive a HTTP error 413. This
response can be changed by overriding Fastcgipp::Request::bigPostErrorHandler().
\snippet examples/echo.cpp Max POST

Normally the default constructor for Fastcgipp::Request would suffice

We'll do the following to have direct access to the Fastcgipp::Encoding stream
manipulator.
\snippet examples/echo.cpp Encoding using

Now let's set up the HTTP header. We will also set a weird cookie. Notice the
use of the Fastcgipp::Encoding manipulator. In this context we are telling the
stream buffer to URL encode all insertions until a new encoding manipulator is
inserted.
\snippet examples/echo.cpp Header

Next we'll get some initial HTML stuff out of the way
\snippet examples/echo.cpp HTML

Now we are ready to start outputting environment data. We'll start with the
simple environment() members. This data is defined and initialized in the
environment() object which is of type Fastcgipp::Http::Environment.
\snippet examples/echo.cpp Environment

Next we will take a look at what path info we were sent. This is available as a
vector of strings.
\snippet examples/echo.cpp Path Info

Of course, there may have been some other non-standard environment parameters
passed from the server so those have all been thrown into an associative map
container linking names to values.
\snippet examples/echo.cpp Other Environment

Now let's take a look at the GET data. The GET data is stored in an associative
multimap container linking names to values.
\snippet examples/echo.cpp GET Data

Now let's take a look at the POST data. The POST data is, unsurprisingly, stored
in an associative multimap container linking names to values.
\snippet examples/echo.cpp POST Data

Now let's take a look at the cookie data. The cookie data is, as well, stored in
an associative multimap container linking names to values.
\snippet examples/echo.cpp Cookies

And now we shall take a look at the files that were submitted to us. This again
is an associated multimap container but although the key is a string, the value
is the Fastcgipp::Http::File data structure.
\snippet examples/echo.cpp Files

When we wish to output some binary data we obviously wish to avoid using the
stream buffers code conversion and encoding mechanisms and output direct. To
actually display the file we will use the Fastcgipp::Request::dump() function.
This dumps the file data directly to the client.
\snippet examples/echo.cpp Dump

Now let's output a simple form for sending data to this application
\snippet examples/echo.cpp Form

And the rest is all familiar
\snippet examples/echo.cpp Finish

### Full Source Code ###

\include echo.cpp

*/
